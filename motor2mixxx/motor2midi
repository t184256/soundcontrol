#!/usr/bin/python -B
# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4

import os
import sys
import time
from math import pi, sin, floor, ceil
from evdev import InputDevice, ecodes

def blink_on():
    os.system('echo 1 > /sys/class/leds/tpacpi\:\:thinklight/brightness')

def blink_off():
    os.system('echo 0 > /sys/class/leds/tpacpi\:\:thinklight/brightness')


import rtmidi
MidiOut = rtmidi.MidiOut(name='Motor')
MidiOut.open_virtual_port(name='Motor')
def cc_send(val, chan=0):
    return MidiOut.send_message([0xE0 + chan, 0, val])

SPEED_MIN, SPEED_MAX = 1600 - 1, 1620 + 1# 4095
SPEED_DEFAULT = (SPEED_MIN + SPEED_MAX) / 2
#SPEED_MIN, SPEED_MAX = 620, 635 # 4095
SPEED_STEP = .01 * 2
CORRECT_LOW = 0.25
CORRECT_HIGH = 2.75
SKIPPY_SPEED = 2.75
class Motor(object):
    def __init__(self):
        import serial
        self.ser = serial.Serial('/dev/ttyACM0', 115200)
        time.sleep(1.0)
        self.speed = float(SPEED_DEFAULT)
        self.real_speed = 0
        self._wrt('0')
        self.adjspeed(0)

    def _wrt(self, s):
        self.ser.write((s).encode('ascii'))

    def adjspeed(self, boost):
        self.speed += boost
        self.speed = max(self.speed, SPEED_MIN)
        self.speed = min(self.speed, SPEED_MAX)
        while self.real_speed < floor(self.speed - 0.05 - 256):
            sys.stderr.write('spd++P %d\n' % self.real_speed); sys.stderr.flush()
            self._wrt('P')
            self.real_speed += 256
        while self.real_speed < floor(self.speed - 0.05 - 32):
            sys.stderr.write('spd++P %d\n' % self.real_speed); sys.stderr.flush()
            self._wrt('p')
            self.real_speed += 32
        while self.real_speed < floor(self.speed + 0.05):
            self._wrt('+')
            self.real_speed += 1
            sys.stderr.write('spd++ %d\n' % self.real_speed); sys.stderr.flush()
        while self.real_speed > ceil(self.speed - 0.05):
            self._wrt('-')
            self.real_speed -= 1
            sys.stderr.write('spd-- %d\n' % self.real_speed); sys.stderr.flush()

motor = Motor()

SCALE = 35.
TRANSMISSION_SCALE = 128
CHANS = 8
INJECT_ZERO_AFTER = 0.075
WEIGHT = 1./ 8
SPEEDMATCH = 1./ 4  * 2 # let's try this!
WEIGHT_NEAR_ONE = 1./ 512 * 1 # let's try this!
SPEEDMATCH_NEAR_ONE = 1./ 4
FORGIVING_NEAR_ONE = .5
FORGIVING_NEAR_ONE_HIGHER_THAN = 3.5
FORGIVING_NEAR_ONE_LOWER_THAN = 1.5
FORGIVING_ADJUST_SCALE = 0.0001
FORGIVING_ADJUST_SCALE_BY = 0.005
TEND_TO_ONE = 0.005
tend_to_one_strength = lambda d1_n: (1-d1_n)**(1./3)


et = lambda event: event.sec + event.usec * 1.e-6

def main():
    PATH = '/dev/input/by-id/usb-192f_USB_Optical_Mouse-event-mouse'
    dev = InputDevice(PATH)
    dev.grab()

    target = target_real = transmitted = 0.
    #x, y, = 0., 0.
    y = 0.
    v_prev = 0.
    sys.stderr.write('start\n'); sys.stderr.flush()
    ts = t_now = time.time()
    d1_prev = 0.
    s_prev = 0.
    dtt_prev = 0
    i = 32
    scale = SCALE
    while True:
        time.sleep(0.0005)
        real_event = False
        try:
            e = dev.read_one()
            if e.type == ecodes.EV_REL:
#                if e.code == ecodes.REL_X:
#                    x = float(-e.value) / scale
                if e.code == ecodes.REL_Y:
                    y = float(-e.value) / scale
            if e.type == ecodes.EV_SYN:
                t_now = et(e)
                real_event = True
            if not real_event: continue
        except:
            if time.time() - t_now < INJECT_ZERO_AFTER: continue
            #x, y, t_now = 0., 0., time.time()
            y, t_now = 0., time.time()
            real_event = False

        s = y

        if s > 0.25 and s > s_prev * 1.75:
            s_prev = s
            #sys.stderr.write('skip\n'); sys.stderr.flush()
            continue

        dtt = target - transmitted
        if abs(v_prev - 1.) < TEND_TO_ONE * 0.8:
            DTT_CROSS = 2.5
            if dtt > DTT_CROSS and dtt_prev <= DTT_CROSS:
                blink_on()
                sys.stderr.write('B-\n'); sys.stderr.flush()
                motor.adjspeed(-2.5)
                blink_off()
            if dtt < DTT_CROSS and dtt_prev >= DTT_CROSS:
                blink_on()
                sys.stderr.write('B+\n'); sys.stderr.flush()
                motor.adjspeed(+2.5)
                blink_off()
            if dtt > FORGIVING_NEAR_ONE_HIGHER_THAN:
                target -= FORGIVING_NEAR_ONE
                #sys.stderr.write('forg-\n'); sys.stderr.flush()
                motor.adjspeed(-SPEED_STEP)
            if dtt < FORGIVING_NEAR_ONE_LOWER_THAN:
                target += FORGIVING_NEAR_ONE
                #sys.stderr.write('forg+\n'); sys.stderr.flush()
                motor.adjspeed(+SPEED_STEP)
        dtt_prev = dtt

        target += s
        target_real += s
        delta = target - transmitted

        if i > 0:
            i -= 1
            continue

        if abs(v_prev - 1.) > TEND_TO_ONE * 0.9:
            v = delta * SPEEDMATCH
            v = v_prev * (1 - WEIGHT) + v * WEIGHT
        else:
            v = delta * SPEEDMATCH_NEAR_ONE
            v = v_prev * (1 - WEIGHT_NEAR_ONE) + v * WEIGHT_NEAR_ONE

        if CORRECT_LOW < v < 1 - TEND_TO_ONE:
            #sys.stderr.write('sp+\n'); sys.stderr.flush()
            motor.adjspeed(+SPEED_STEP/2)
        if CORRECT_HIGH > v > 1 + TEND_TO_ONE:
            #sys.stderr.write('sp-\n'); sys.stderr.flush()
            motor.adjspeed(-SPEED_STEP/2)
        if v > SKIPPY_SPEED:
            sys.stderr.write('SK\n'); sys.stderr.flush()
            motor._wrt('s');

        d1 = v - 1.
        if abs(d1) < TEND_TO_ONE:
            # in interval (-R, R), R = TEND_TO_ONE
            # change d1 to d1 + TEND_TO_ONE_STRENGTH * sin(d1*2*pi/R)/(2*pi*R)
            K = 2. * pi / TEND_TO_ONE
            d1_norm = abs(d1) / TEND_TO_ONE
            d1 = d1 + tend_to_one_strength(d1_norm) * sin(pi + d1 * K) / K
            v = 1 + d1
            if abs(d1_prev) > abs(d1):
                #scale += FORGIVING_ADJUST_SCALE_BY * d1
                if d1 > +FORGIVING_ADJUST_SCALE:
                #    sys.stderr.write('scale+ %s\n' % str(scale))
                    #motor.adjspeed(-SPEED_STEP*2)
                    #sys.stderr.write('SPD-\n')
                    sys.stderr.flush()
                elif d1 < -FORGIVING_ADJUST_SCALE:
                #    sys.stderr.write('scale- %s\n' % str(scale))
                    #motor.adjspeed(+SPEED_STEP*2)
                    #sys.stderr.write('SPD+\n')
                    sys.stderr.flush()
        d1_prev = d1

        w = round(v * TRANSMISSION_SCALE, 0)
        w = min(max(w, -0x80 * CHANS), 0x80 * CHANS)
        d_transmitted = float(w) / TRANSMISSION_SCALE
        transmitted += d_transmitted

        cc, d = divmod(w + 0x80 * CHANS, 0x80)
        cc_send(d, cc)
        #print v, dtt, -0.5, 2.5; sys.stdout.flush()
        #if (time.time() > ts + 24): sys.exit(1)
        y = 0.
        v_prev = v
        s_prev = s


if __name__ == '__main__': main()
